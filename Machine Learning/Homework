Homework

Regression model predicting house prices in India

Dataset: https://data.world/dataindianset2000/house-price-india

#Activate library
library(tidyverse)
library(caret)
library(readxl)

#Import data set
house_price_data <- read_xlsx("House Price India.xlsx")
glimpse(house_price_data)
View(house_price_data)

#Basic data visualization
ggplot(house_price_data, aes(Price)) +
  geom_histogram()

#The Price column is skewed positively
#Fix skewness by using log transformation
house_price_data_log <- house_price_data %>%
  mutate(Price_log = log(Price + 1))

View(house_price_data_log)

#Data viz after fixing the skewness
ggplot(house_price_data_log, aes(Price_log)) +
  geom_histogram()

#Price column distribution is now better

#Rename columns
house_price_renamed <- house_price_data_log %>%
  rename("Distance_from_the_airport" = "Distance from the airport" ,
         "Area_of_the_house_excluding_basement" = "Area of the house(excluding basement)",
         "Area_of_the_basement" = "Area of the basement",
         "Grade_of_the_house" = "grade of the house",
         "Condition_of_the_house" = "condition of the house")

##ML Time!
#1. Split data

#train_test_split function
train_test_split <- function(data, train_ratio = 0.7) {
  set.seed(42)
  n <- nrow(data)
  id <- sample(1 : n, size = train_ratio * n)
  train_data <- data[id, ]
  test_data <- data[-id, ]
  return( list(train = train_data, test = test_data) )
}

#Split data into train data and test data
set.seed(42)
split_data <- train_test_split(house_price_renamed, 0.8)
train_data <- split_data$train
test_data <- split_data$test

#2. Train data
#Set train control parameter
ctrl <- trainControl(
  method = "cv", 
  number = 5, 
  verboseIter = TRUE 
)

#Training 3 models
#2.1 Linear Regression
lm_model <- train(Price_log ~ Distance_from_the_airport + 
                    Area_of_the_house_excluding_basement + 
                    Area_of_the_basement +
                    Grade_of_the_house +
                    Condition_of_the_house, 
                  data = train_data, 
                  method = "lm", 
                  trControl = ctrl)

#2.2 Random Forest
rf_model <- train(Price_log ~ Distance_from_the_airport + 
                    Area_of_the_house_excluding_basement + 
                    Area_of_the_basement +
                    Grade_of_the_house +
                    Condition_of_the_house, 
                  data = train_data, 
                  method = "rf", 
                  trControl = ctrl)

#2.3 K-Nearest Neighbors 
knn_model <- train(Price_log ~ Distance_from_the_airport + 
                    Area_of_the_house_excluding_basement + 
                    Area_of_the_basement +
                    Grade_of_the_house +
                    Condition_of_the_house, 
                  data = train_data, 
                  method = "knn", 
                  trControl = ctrl)

#3. Score
p_lm <- predict(lm_model, newdata = test_data)
p_rf <- predict(rf_model, newdata = test_data)
p_knn <- predict(knn_model, newdata = test_data)

#4. Evaluate
#Evaluate Model with Metrics
#MAE, MSE, RMSE

#Mean Absolute Error
MAE <- function(actual, prediction) {
  abs_error <- abs(actual - prediction)
  mean(abs_error)
}

#Mean Squared Error
MSE <- function(actual, prediction) {
  sq_error <- (actual - prediction) ** 2
  mean(sq_error)
}

#Root Mean Squared Error
RMSE <- function(actual, prediction) {
  sq_error <- (actual - prediction) ** 2
  sqrt(mean(sq_error))
}

##train - test comparison
#lm 
lm_model
MAE(test_data$Price_log, p_lm)
MSE(test_data$Price_log, p_lm)
RMSE(test_data$Price_log, p_lm)

#rf test
rf_model
MAE(test_data$Price_log, p_rf)
MSE(test_data$Price_log, p_rf)
RMSE(test_data$Price_log, p_rf)

#knn test
knn_model
MAE(test_data$Price_log, p_knn)
MSE(test_data$Price_log, p_knn)
RMSE(test_data$Price_log, p_knn)

#5. Save model
saveRDS(lm_model, "lm_model_v1.RDS")
saveRDS(rf_model, "rf_model_v1.RDS")
saveRDS(knn_model, "knn_model_v1.RDS")
