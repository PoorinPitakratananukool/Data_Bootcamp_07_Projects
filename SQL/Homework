.open restaurant.db

CREATE TABLE IF NOT EXISTS chefs(
  ChefId INT UNIQUE,
  FranchiseId INT,
  ChefName TEXT UNIQUE,
  Salary REAL,
  PRIMARY KEY (ChefId),
  FOREIGN KEY (FranchiseId) REFERENCES     franchises(FranchiseId)
);

CREATE TABLE IF NOT EXISTS franchises(
  FranchiseId INT UNIQUE,
  FranchiseName TEXT,
  RegionId INT,
  PRIMARY KEY (FranchiseId),
  FOREIGN KEY (RegionId) REFERENCES regions(RegionId)
);

CREATE TABLE IF NOT EXISTS regions(
  RegionId INT UNIQUE,
  RegionName TEXT,
  PRIMARY KEY (RegionId)
);

CREATE TABLE IF NOT EXISTS foods(
  FoodId INT UNIQUE,
  FoodName TEXT,
  FoodType TEXT,
  PRIMARY KEY (FoodId)
);

CREATE TABLE IF NOT EXISTS customers(
  CustomerId INT UNIQUE,
  CustomerName TEXT,
  FoodId INT,
  OrderId INT,
  PRIMARY KEY (CustomerId),
  FOREIGN KEY (FoodId) REFERENCES foods(FoodId),
  FOREIGN KEY (OrderId) REFERENCES orders(OrderId)
);

CREATE TABLE IF NOT EXISTS orders(
  OrderId INT UNIQUE,
  ChefName TEXT,
  RegionId INT,
  PRIMARY KEY (OrderId),
  FOREIGN KEY (ChefName) REFERENCES chefs(ChefName),
  FOREIGN KEY (RegionId) REFERENCES regions(RegionId)
); 

INSERT INTO chefs VALUES 
  (1,2,'Xiangling',400000),
  (2,1,'Diona',300000),
  (3,3,'Ei',500000);

INSERT INTO franchises VALUES 
  (1,'Central',1),
  (2,'North',2),
  (3,'South',3);

INSERT INTO regions VALUES
  (1,'Mondstadt'),
  (2,'Liyue'),
  (3,'Inazuma'),
  (4,'Sumeru'),
  (5,'Fontaine'),
  (6,'Natlan'),
  (7,'Snezhnaya');

INSERT INTO foods VALUES 
  (1,'Biryani','Main_Dish'),
  (2,'Egg Roll','Appetizer'),
  (3,'Apple Cider','Drink');

INSERT INTO customers VALUES
  (1,'Kaedehara Kazuha',2,1),
  (2,'Kamisato Ayaka',2,2),
  (3,'Kamisato Ayato',3,3),
  (4,'Naganohara Yoimiya',1,1);

INSERT INTO orders VALUES
  (1,'Xiangling',2),
  (2,'Diona',1),
  (3,'Ei',3);

.mode column
.header on

--Query 1: Find chef with max salary:
SELECT * FROM chefs WHERE Salary =
(SELECT MAX(Salary) FROM chefs);

--Query 2: Find customer who order Egg Rolls:
SELECT 
	cu.CustomerName AS customer_name,
	fo.FoodName AS food_name
FROM customers AS cu
JOIN foods AS fo ON cu.FoodId = fo.FoodId
WHERE FoodName = "Egg Roll"; 

--Query 3: Find Chef Xiangling's orders, customers, and foods using WITH:
With xl AS (
	SELECT 
		chefs.chefname AS chef_name,
		orders.orderid AS order_id,
		customers.customername AS customer_name,
		foods.foodname AS food_name
	FROM chefs 
	LEFT JOIN orders  ON chefs.chefname = orders.chefname
	LEFT JOIN customers  ON orders.orderid = customers.orderid
	LEFT JOIN foods ON customers.foodid = foods.foodid
 )

SELECT * FROM xl where chef_name = "Xiangling";

--Query 4: Sort all chefs based on their salary:
SELECT 
	ChefName AS chef_name,
	Salary AS salary
FROM chefs
ORDER BY Salary DESC;

--Query 5: Salary Segmentation:
SELECT 
	chef_name,
    salary,
	CASE WHEN segment IN (1) THEN "low"
	WHEN segment IN (3) THEN "high"
	ELSE "medium"
	END AS salary_segment

FROM (
	SELECT
		ChefName AS chef_name,
  		Salary AS salary,
		NTILE(3) OVER(ORDER BY Salary) AS segment
	FROM chefs
	ORDER BY Salary DESC
);
